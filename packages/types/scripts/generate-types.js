const fs = require('fs')
const path = require('path')

const generatedFilePath = path.resolve(__dirname, '../src/generated.types.ts')
const databaseFilePath = path.resolve(__dirname, '../src/database.types.ts')

const warningComment = `/**
 * WARNING: This file is automatically generated by kysely-codegen.
 * DO NOT modify this file directly.
 */

`

const content = fs.readFileSync(generatedFilePath, 'utf8')

fs.writeFileSync(generatedFilePath, warningComment + content)

// Extract custom types (like FederationType, LeagueType, etc.)
const customTypeRegex = /export type (\w+) = ([^;]+);/g
const customTypes = []
let customTypeMatch

while ((customTypeMatch = customTypeRegex.exec(content)) !== null) {
  const typeName = customTypeMatch[1]
  const typeDefinition = customTypeMatch[2]
  if (!typeName.includes('Generated') && !typeName.includes('Json')) {
    customTypes.push({ name: typeName, definition: typeDefinition })
  }
}

// Extract table interfaces
const tableRegex = /export interface (\w+) {([^}]+)}/g
const tables = []
let match

while ((match = tableRegex.exec(content)) !== null) {
  const tableName = match[1]
  if (tableName !== 'DB' && tableName !== 'Generated' && tableName !== 'Timestamp') {
    tables.push(tableName)
  }
}

function createDatabaseTypesFile(tables, customTypes) {
  let content = `/**
 * This file exports database types with Selectable, Insertable, and Updateable wrappers.
 * These types are derived from the generated types.
 */

import type { Selectable, Insertable, Updateable, ColumnType } from 'kysely'
import type { DB } from './generated.types'

// Export custom types
${customTypes.map(type => `export type ${type.name} = ${type.definition}`).join('\n')}

export interface DatabaseTypes {
${tables.map(table => `  ${table}: Selectable<DB['${table}']>`).join('\n')}
}

`

  tables.forEach(table => {
    content += `export type ${table} = Selectable<DB['${table}']>\n`
    content += `export type Insert${table} = Insertable<DB['${table}']>\n`
    content += `export type Update${table} = Updateable<DB['${table}']>\n\n`
  })

  return content
}

const databaseTypesContent = createDatabaseTypesFile(tables, customTypes)
fs.writeFileSync(databaseFilePath, databaseTypesContent)

console.log('Types generated successfully, now building them...')
