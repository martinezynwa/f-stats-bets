/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export enum BetResultType {
  AWAY_WIN = "AWAY_WIN",
  DRAW = "DRAW",
  HOME_WIN = "HOME_WIN",
}

export enum FederationType {
  AFRICA = "AFRICA",
  ASIA = "ASIA",
  EUROPE = "EUROPE",
  NORTH_CENTRAL_AMERICA = "NORTH_CENTRAL_AMERICA",
  OCEANIA = "OCEANIA",
  SOUTH_AMERICA = "SOUTH_AMERICA",
  WORLD = "WORLD",
}

export enum LeagueType {
  CLUB_TOURNAMENT = "ClubTournament",
  FRIENDLY = "Friendly",
  LEAGUE = "League",
  LEAGUE_CUP = "LeagueCup",
  NATIONAL_TOURNAMENT = "NationalTournament",
  TOTALS = "Totals",
  UNASSIGNED = "Unassigned",
}

export enum LogType {
  ERROR = "ERROR",
  INFO = "INFO",
  WARNING = "WARNING",
}

export enum OrganizationType {
  AFC = "AFC",
  AUSTRIA = "AUSTRIA",
  BELGIUM = "BELGIUM",
  CAF = "CAF",
  CONCACAF = "CONCACAF",
  CONMEBOL = "CONMEBOL",
  CZECH = "CZECH",
  ENGLAND = "ENGLAND",
  FIFA = "FIFA",
  FRANCE = "FRANCE",
  GERMANY = "GERMANY",
  ITALY = "ITALY",
  NETHERLANDS = "NETHERLANDS",
  OFC = "OFC",
  PORTUGAL = "PORTUGAL",
  SPAIN = "SPAIN",
  TURKEY = "TURKEY",
  UEFA = "UEFA",
}

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Bet {
  betCompetitionId: string;
  betId: Generated<string>;
  createdAt: Generated<Timestamp | null>;
  fixtureGoalsBet: Json | null;
  fixtureId: number;
  fixtureResultBet: BetResultType | null;
  fixtureScorersBet: Json | null;
  isEvaluated: Generated<boolean>;
  leagueId: string;
  oddValue: Json | null;
  season: number;
  updatedAt: Timestamp | null;
  userId: string;
}

export interface Fixture {
  awayTeamExternalId: number;
  awayTeamGoalsExtra: number | null;
  awayTeamGoalsFinish: number | null;
  awayTeamGoalsHalf: number | null;
  awayTeamGoalsPenalty: number | null;
  awayTeamId: string;
  createdAt: Generated<Timestamp | null>;
  date: string;
  elapsed: number | null;
  externalLeagueId: number;
  fixtureId: number;
  fixtureRoundId: string | null;
  homeTeamExternalId: number;
  homeTeamGoalsExtra: number | null;
  homeTeamGoalsFinish: number | null;
  homeTeamGoalsHalf: number | null;
  homeTeamGoalsPenalty: number | null;
  homeTeamId: string;
  id: Generated<string | null>;
  leagueId: string;
  referee: string | null;
  round: number;
  season: number;
  status: string;
  teamIdWon: string | null;
  updatedAt: Timestamp | null;
  venue: string | null;
}

export interface FixtureRound {
  dateStarted: string;
  externalLeagueId: number;
  hasStarted: Generated<boolean>;
  id: Generated<string>;
  leagueId: string;
  round: number;
  season: number;
}

export interface League {
  countPlayerStats: boolean | null;
  country: string;
  createdAt: Generated<Timestamp | null>;
  dateEnd: string;
  dateStart: string;
  externalLeagueId: number;
  federation: FederationType;
  flag: string;
  gamesPlayed: Generated<number>;
  groupStage: boolean | null;
  id: Generated<string>;
  isForUnassigned: Generated<boolean | null>;
  logo: string;
  name: string;
  national: boolean;
  organization: OrganizationType | null;
  season: number;
  supported: Generated<boolean>;
  type: LeagueType;
  updatedAt: Timestamp | null;
}

export interface Log {
  action: string;
  additionalData: Json | null;
  createdAt: Generated<Timestamp | null>;
  id: Generated<string>;
  message: string;
  type: LogType;
  userId: string | null;
}

export interface Nation {
  altNationName: string | null;
  code: string;
  flag: string;
  id: number;
  nationName: string;
}

export interface Season {
  isActual: Generated<boolean>;
  isSupported: boolean | null;
  seasonEndDate: string;
  seasonId: number;
  seasonStartDate: string;
  supportedLeagues: Json;
}

export interface Team {
  code: string | null;
  country: string;
  createdAt: Generated<Timestamp | null>;
  externalLeagueId: number;
  externalTeamId: number;
  id: Generated<string>;
  isForUnassigned: Generated<boolean | null>;
  leagueId: string;
  logo: string | null;
  name: string;
  national: boolean;
  season: number;
  updatedAt: Timestamp | null;
  venue: string | null;
}

export interface User {
  avatar: string | null;
  createdAt: Generated<Timestamp | null>;
  id: Generated<string>;
  isVerified: boolean | null;
  name: string;
  providerAvatar: string | null;
  providerId: string;
  providerName: string;
  updatedAt: Timestamp | null;
}

export interface UserSettings {
  createdAt: Generated<Timestamp | null>;
  id: Generated<string>;
  leagueOrder: string | null;
  providerId: string;
  updatedAt: Timestamp | null;
  userId: string;
}

export interface DB {
  Bet: Bet;
  Fixture: Fixture;
  FixtureRound: FixtureRound;
  League: League;
  Log: Log;
  Nation: Nation;
  Season: Season;
  Team: Team;
  User: User;
  UserSettings: UserSettings;
}
